#jinja2: trim_blocks: True, lstrip_blocks: True
{#

#}
{% set print = self %}

{%- macro vhost_server_name(data) -%}
{% if data | bodsch.core.var_type == "string" %}
  server_name
    {{ data }};
{% elif data | bodsch.core.var_type == "list" %}
  server_name
    {{ data | join('\n') | indent(4, first=False) }};
{% endif %}
{%- endmacro -%}

{%- macro vhost_logfile(logfiles, domain) -%}

{% if logfiles | default({}) | count > 0 %}
  {% if logfiles.access.file | default('') | string | length > 0 %}
  access_log          {{ logfiles.access.file }} {{ logfiles.access.loglevel | default('') }};
  {% elif logfiles.access.syslog | default({}) | count > 0 and
            logfiles.access.syslog.server is defined and
            logfiles.access.syslog.server | string | length > 0 %}
    {% set _access_options = "" %}
    {% set _error_options = "" %}
    {% if logfiles.access.syslog.options | default([]) | count > 0 %}
      {% set _access_options = "," ~ logfiles.access.syslog.options | join(",") %}
    {% endif %}
  access_log          syslog:server={{ logfiles.access.syslog.server }}{{ _access_options }} {{ logfiles.access.loglevel | default('') }};
  {% endif %}
  {% if logfiles.error.file | default('') | string | length > 0 %}
  error_log           {{ logfiles.error.file }} {{ logfiles.error.loglevel | default('error') }};
  {% elif logfiles.error.syslog | default({}) | count > 0 and
            logfiles.error.syslog.server is defined and
            logfiles.error.syslog.server | string | length > 0 %}
    {% if logfiles.error.syslog.options | default([]) | count > 0 %}
      {% set _error_options = "," ~ logfiles.error.syslog.options | join(",") %}
    {% endif %}
  error_log           syslog:server={{ logfiles.error.syslog.server }}{{ _error_options }} {{ logfiles.error.loglevel | default('error') }};
  {% endif %}
{% else %}
  access_log          /var/log/nginx/{{ domain }}_access.log;
  error_log           /var/log/nginx/{{ domain }}_error.log error;
{% endif %}
{%- endmacro -%}

{# ssl_* #}
{%- macro vhost_certificates(data, domain) -%}
{% if data.state | default('present') %}
  include             includes.d/ssl.conf;
  {% if data.ciphers is defined %}
  include             includes.d/ssl_{{ data.ciphers }}.conf;
  {% endif %}
  ssl_certificate     {{ data.certificate }};
  ssl_certificate_key {{ data.certificate_key }};
    {% if data.dhparam is defined and
          data.dhparam | string | length > 0 %}
  ssl_dhparam         {{ data.dhparam }};
    {% endif %}
{% endif %}

{%- endmacro -%}

{# upstreams #}
{%- macro vhost_upstreams(data) -%}
{% for upstream in data %}
upstream {{ upstream.name }} {
  {% if upstream.strategy is defined %}
  {{ upstream.strategy }};
  {% endif %}
  {% for server in upstream.servers %}
  server {{ server }}{% if upstream.options is defined and upstream.options | length > 0 %} {{ upstream.options.rjust(30) }}{% endif %};
  {% endfor %}
  {% if upstream.keepalive is defined %}
  keepalive {{ upstream.keepalive }};
  {% endif %}
}
{% endfor %}

{%- endmacro -%}

{%- macro vhost_locations(data) -%}

{% if data | is_dict %}
  {% for k, v in data.items() %}
  location {{ k }} {
    {% if v.options is defined %}
    {{ v.options | indent(4) }}
    {%- endif %}
  }

  {% endfor %}
{% endif %}
{% if data == "list" %}
  {% for l in data %}
  location {{ l.location }} {
    {{ l.options | indent(4) }}
  }
  {% endfor %}
{% endif %}

{%- endmacro -%}

{%- macro vhost_listen(port=80, default=False) -%}

{% if port | bodsch.core.var_type == "string" or port is integer %}
  listen
    {{ port }}{% if default %} default_server{% endif %};
{% endif %}
{% if port | bodsch.core.var_type == "list" %}
  {% for l in port %}
  listen
    {{ l }}{% if default %} default_server{% endif %};
  {% endfor %}
{% endif %}

{%- endmacro -%}
