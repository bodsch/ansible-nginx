---

- name: detect nginx group
  when:
    - not nginx_group is defined or nginx_group | length > 0
  block:
    - name: "find primary group for user '{{ nginx_user }}'"
      ansible.builtin.getent:
        database: group
        key: "{{ nginx_user }}"
        split: ':'

    - name: "set nginx_group '{{ getent_group | list | first }}'"
      ansible.builtin.set_fact:
        nginx_group: "{{ getent_group | list | first }}"
      when:
        - getent_group is defined

- name: create nginx cache directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: 0750
  loop: "{{ nginx_http.proxy.cache_path | default([]) }}"
  loop_control:
    label: "{{ item.path | default(omit) }}"
  when:
    - nginx_http.proxy.cache_path is defined
    - nginx_http.proxy.cache_path | count > 0
    - item is defined
    - item.path is defined
    - item.path | string | length > 0

- name: create nginx sites directories
  ansible.builtin.file:
    path: "/etc/nginx/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0750
  loop:
    - sites-available
    - sites-enabled
    - includes.d
    - conf.d

- name: remove default site
  ansible.builtin.file:
    name: "{{ nginx_default_site.file | default('/etc/nginx/sites-enabled/default') }}"
    state: absent
  when:
    - nginx_default_site.remove | default('true')

- name: acme challenge
  when:
    - nginx_acme is defined
    - nginx_acme.enabled
    - nginx_acme.challenge_directory is defined
    - nginx_acme.challenge_directory | length > 0
  block:
    - name: create acme challenge directory
      ansible.builtin.file:
        path: "{{ nginx_acme.challenge_directory }}/.well-known/acme-challenge"
        state: directory
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
        mode: 0755

    - name: fix directory rights for {{ nginx_acme.challenge_directory }}
      ansible.builtin.file:
        path: "{{ nginx_acme.challenge_directory }}"
        state: directory
        owner: "{{ nginx_user }}"
        group: "{{ nginx_group }}"
        mode: 0755
        recurse: true

- name: create gzip configuration
  ansible.builtin.template:
    src: conf.d/gzip.conf.j2
    dest: /etc/nginx/conf.d/gzip.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - validate config
    - reload nginx

- name: create ssl configuration
  nginx_ssl:
    config: "{{ nginx_ssl }}"
    dest: /etc/nginx/includes.d
  when:
    - nginx_ssl is defined
    - nginx_ssl.enabled | default('false') | bool
  notify:
    - validate config
    - reload nginx

- name: create logformat configuration
  ansible.builtin.template:
    src: includes.d/nginx_log.conf.j2
    dest: /etc/nginx/includes.d/nginx_log.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - validate config
    - reload nginx

- name: create useragent.rules configuration
  ansible.builtin.template:
    src: includes.d/useragent.rules.j2
    dest: /etc/nginx/includes.d/useragent.rules
    owner: root
    group: root
    mode: 0644
  notify:
    - validate config
    - reload nginx

- name: create proxy_cache.rules configuration
  ansible.builtin.template:
    src: includes.d/proxy_cache.rules.j2
    dest: /etc/nginx/includes.d/proxy_cache.rules
    owner: root
    group: root
    mode: 0644
  notify:
    - validate config
    - reload nginx

- name: create custom includes
  become: true
  ansible.builtin.template:
    src: includes.d/custom_include.j2
    dest: /etc/nginx/includes.d/{{ item.key }}
    mode: 0644
  loop:
    "{{ nginx_custom_includes | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  notify:
    - validate config
    - reload nginx

- name: create nginx main configuration
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: "{{ nginx_group }}"
    mode: 0644
    backup: true
  notify:
    - validate config
    - reload nginx

...
