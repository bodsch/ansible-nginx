---

- name: checking existing domains certificates
  stat:
    path: '{{ item.value.ssl_certificate_key }}'
    get_checksum: false
    get_md5: false
    get_mime: false
    get_attributes: false
  loop:
    "{{ nginx_vhosts | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when:
    - item.value.state | default('present') != 'absent'
    - item.value.ssl_certificate_key is defined
    - item.value.ssl_certificate_key | length > 0
  register: check_domain_cert

- name: append certificates state to vhost configurations
  set_fact:
    nginx_vhosts: "{{ nginx_vhosts | check_certificates(check_domain_cert) }}"

- name: create acme-challenge  directories
  file:
    path: "/var/www/{{ item.key }}/.well-known/acme-challenge"
    state: directory
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: 0777
  loop:
    "{{ nginx_vhosts | dict2items }}"
  loop_control:
    label: "/var/www/{{ item.key }}/.well-known/acme-challenge"

# ---------------------------------------------------------------------------------------

- name: remove vhost configurations
  file:
    path: "/etc/nginx/sites-available/{{ item.value.filename | default( item.key ~ '.conf' ) }}"
    state: absent
  when:
    - item.value.state | default('present') == 'absent'
  loop:
    "{{ nginx_vhosts | dict2items }}"
  loop_control:
    label: "{{ item.value.filename | default( item.key ~ '.conf') }}"

- name: create HTTP vhost configurations
  template:
    src: "{{ item.value.template | default( 'vhosts/' ~ nginx_vhost_templates.http ) }}"
    dest: "/etc/nginx/sites-available/{{ item.value.filename | default( item.key ~ '.conf' ) }}"
    force: true
    owner: root
    group: root
    mode: 0644
  when:
    - item.value.state | default('present') != 'absent'
    - not item.value.ssl_certificate_exists is defined or
      not item.value.ssl_certificate_exists
    # - not item.value.letsencrypt | default(true)
  loop:
    "{{ nginx_vhosts | dict2items }}"
  loop_control:
    label: "{{ item.value.filename | default( item.key ~ '.conf') }}"
  # notify: reload nginx

- name: create HTTPs vhost configurations
  template:
    src: "{{ item.value.template | default( 'vhosts/' ~ nginx_vhost_templates.https ) }}"
    dest: "/etc/nginx/sites-available/{{ item.value.filename | default( item.key ~ '.conf' ) }}"
    force: true
    owner: root
    group: root
    mode: 0644
  when:
    - item.value.state | default('present') != 'absent'
    - item.value.ssl_certificate_exists is defined
    - item.value.ssl_certificate_exists
    # - not item.value.letsencrypt | default(true)
  loop:
    "{{ nginx_vhosts | dict2items }}"
  loop_control:
    label: "{{ item.value.filename | default( item.key ~ '.conf') }}"
  # notify: reload nginx

# ---------------------------------------------------------------------------------------

- name: get active sites
  command: ls -1 /etc/nginx/sites-enabled/
  changed_when: "active.stdout_lines != nginx_vhosts.keys() | sort()"
  check_mode: false
  register: active

- name: de-activate Sites
  file:
    path: /etc/nginx/sites-enabled/{{ item }}
    state: absent
  with_items: "{{ active.stdout_lines }}"
  # notify: reload Nginx
  when:
    - item not in nginx_vhosts
    - nginx_de_activate_sites

- name: enable site config
  file:
    src: /etc/nginx/sites-available/{{ item.key }}.conf
    dest: /etc/nginx/sites-enabled/{{ item.key }}
    state: link
  loop:
    "{{ nginx_vhosts | dict2items }}"
  #loop_control:
  #  label: "{{ item.value.filename | default( item.key ~ '.conf') }}"
  # with_dict: "{{ nginx_revproxy_sites }}"
  # notify: Reload Nginx
  when:
    # - siteconfig is success
    - not item.value.letsencrypt | default('true')
    - not ansible_check_mode

# ---------------------------------------------------------------------------------------

- name: get active sites
  command: ls -1 /etc/nginx/sites-enabled/
  changed_when: "active.stdout_lines != nginx_vhosts.keys() | sort()"
  check_mode: false
  register: active

- name: d
  debug:
    msg: "{{ active }}"
...
