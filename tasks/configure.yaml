---

- block:
    - name: "find primary group for user '{{ nginx_user }}'"
      getent:
        database: group
        key: "{{ nginx_user }}"
        split: ':'

    - name: "set nginx_group '{{ getent_group | list | first }}'"
      set_fact:
        nginx_group: "{{ getent_group | list | first }}"
      when:
        - getent_group is defined
  when:
    - not nginx_group is defined or nginx_group | length > 0

- name: create nginx sites directories
  file:
    path: "/etc/nginx/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0750
  loop:
    - sites-available
    - sites-enabled
    - includes.d
    - htpasswd.d

- name: remove default site
  file:
    name: "{{ nginx_default_site.file | default('/etc/nginx/sites-enabled/default') }}"
    state: absent
  when:
    - nginx_default_site.remove | default('true')

# - name: create acme challenge directory
#   file:
#     path: "{{ nginx_acme.challenge_directory }}"
#     state: directory
#     owner: "{{ nginx_user }}"
#     group: "{{ nginx_group }}"
#     mode: 0755
#   when:
#     - nginx_acme is defined
#     - nginx_acme.enabled
#     - nginx_acme.challenge_directory is defined
#     - nginx_acme.challenge_directory | length > 0

- name: copy static nginx conf.d
  copy:
    src: conf.d/
    dest: /etc/nginx/conf.d/
    owner: root
    group: root
    mode: 0644

- name: copy static nginx conf.d
  copy:
    src: conf.d/
    dest: /etc/nginx/conf.d/
    owner: root
    group: root
    mode: 0644

- name: create logformat configuration
  template:
    src: includes.d/nginx_log.conf.j2
    dest: /etc/nginx/includes.d/nginx_log.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - validate config
    - reload service

- name: create nginx main configuration
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    owner: root
    group: "{{ nginx_group }}"
    mode: 0644
    backup: true
  notify:
    - validate config
    - reload service

...
