---

- name: create HTTP vhost configurations
  template:
    src: "{{ item.value.template | default( 'vhosts/' ~ nginx_vhost_templates.http ) }}"
    dest: "/etc/nginx/sites-available/{{ item.value.filename | default( item.key ~ '.conf' ) }}"
    force: true
    owner: root
    group: root
    mode: 0644
  when:
    - item.value.state | default('present') == 'present'
  loop:
    "{{ nginx_http_vhosts | dict2items }}"
  loop_control:
    label: "{{ item.value.filename | default( item.key ~ '.conf') }}"

- name: create HTTPs vhost configurations
  template:
    src: "{{ item.value.template | default( 'vhosts/' ~ nginx_vhost_templates.https ) }}"
    dest: "/etc/nginx/sites-available/{{ item.value.filename | default( item.key ~ '.conf' ) }}"
    force: true
    owner: root
    group: root
    mode: 0644
  when:
    - item.value.state | default('present') == 'present'
  loop:
    "{{ nginx_https_vhosts | dict2items }}"
  loop_control:
    label: "{{ item.value.filename | default( item.key ~ '.conf') }}"

# ---------------------------------------------------------------------------------------

- name: enable HTTP sites configs
  file:
    src: /etc/nginx/sites-available/{{ item.value.filename | default( item.key ~ '.conf') }}
    dest: /etc/nginx/sites-enabled/{{ item.value.filename | default( item.key ~ '.conf') }}
    state: link
  loop:
    "{{ nginx_http_vhosts | dict2items }}"
  loop_control:
    label: "{{ item.value.filename | default( item.key ~ '.conf') }}"
  when:
    - item.value.state | default('present') == 'present'
    - item.value.enabled | default('true')
    - not ansible_check_mode
  notify:
    - validate config
    - reload service

# ---------------------------------------------------------------------------------------

- name: enable HTTPs sites configs with existing certificates
  file:
    src: /etc/nginx/sites-available/{{ item.value.filename | default( item.key ~ '.conf') }}
    dest: /etc/nginx/sites-enabled/{{ item.value.filename | default( item.key ~ '.conf') }}
    state: link
  loop:
    "{{ nginx_https_vhosts | dict2items }}"
  loop_control:
    label: "{{ item.value.filename | default( item.key ~ '.conf') }}"
  when:
    - item.value.state | default('present') == 'present'
    - item.value.enabled | default('true')
    - item.value.ssl.state | default('missing') == 'present'
    - not ansible_check_mode
  notify:
    - validate config
    - reload service

# ---------------------------------------------------------------------------------------

...
