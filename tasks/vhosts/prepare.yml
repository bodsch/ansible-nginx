---

- name: validate variables
  ansible.builtin.fail:
    msg: "'nginx_vhosts' should be a list!\nPlease update your configuration."
  when:
    - nginx_vhosts | bodsch.core.type != "list"

- name: define vhosts variables
  ansible.builtin.set_fact:
    nginx_vhosts_root_directories: "{{ nginx_vhosts | vhost_directory(directory='root_directory', state='present') }}"
    nginx_vhosts_http: "{{ nginx_vhosts | http_vhosts(tls=False) }}"
    nginx_vhosts_https: "{{ nginx_vhosts | http_vhosts(tls=True) }}"
    nginx_templates: "{{ nginx_vhosts | vhost_templates(defaults=nginx_vhost_templates) }}"

- name: detect vhost templates
  ansible.builtin.set_fact:
    _nginx_templates: "{{ query('bodsch.core.file_glob', '.j2') }}"
  vars:
    search_path:
      - ".."
      - "../.."
    search_regex: "(vhost|jinja_macros).*"

- name: define vhosts templates checksum
  ansible.builtin.set_fact:
    nginx_templates_checksums: "{{ _nginx_templates | default([]) | vhost_templates_checksum }}"
    # nginx_templates_checksum: "{{ _nginx_templates | default('-') | hash('sha256') }}"

- name: validate vhost template checksums
  ansible.builtin.set_fact:
    nginx_templates_changed: "{{ nginx_templates_checksums | vhost_templates_validate(ansible_local.nginx.templates_checksums | default({})) }}"

- name: find templates directory on destination system
  ansible.builtin.stat:
    path: "{{ nginx_remote_tmp_directory }}/{{ ansible_fqdn }}"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: nginx_template_remote_directory

- name: templates for remote system
  when:
    - nginx_templates_changed.changed or
      not nginx_template_remote_directory.stat.exists | default('false')
  block:

    - name: transfer vhost templates to destination instance
      tags:
        - nginx
      when:
        - _nginx_templates is defined
        - _nginx_templates | count > 0
      block:
        - name: create temporary directory on ansible controller
          become: false
          delegate_to: localhost
          ansible.builtin.file:
            path: "{{ nginx_local_tmp_directory }}/templates/{{ ansible_fqdn }}"
            state: directory
            mode: 0750

        - name: copy vhost templates into temporary directory
          become: false
          delegate_to: localhost
          ansible.builtin.copy:
            src: "{{ item }}"
            dest: "{{ nginx_local_tmp_directory }}/templates/{{ ansible_fqdn }}/"
            mode: 0600
          loop: "{{ _nginx_templates }}"
          loop_control:
            label: "{{ item }}"

        - name: compress temporary directory
          become: false
          delegate_to: localhost
          community.general.archive:
            path: "{{ nginx_local_tmp_directory }}/templates/{{ ansible_fqdn }}"
            dest: "{{ nginx_local_tmp_directory }}/templates/{{ ansible_fqdn }}_templates.tgz"
            mode: 0600

        - name: create temporary directory on destination instance
          become: true
          ansible.builtin.file:
            path: "{{ nginx_remote_tmp_directory }}/{{ ansible_fqdn }}"
            state: directory
            mode: 0750

        - name: propagate templates.tgz
          become: true
          ansible.builtin.copy:
            src: "{{ nginx_local_tmp_directory }}/templates/{{ ansible_fqdn }}_templates.tgz"
            dest: "{{ nginx_remote_tmp_directory }}/{{ ansible_fqdn }}/templates.tgz"
            mode: 0600
  rescue:
    - name: remove temporary directory on ansible controller
      become: false
      delegate_to: localhost
      ansible.builtin.file:
        state: absent
        path: "{{ nginx_local_tmp_directory }}/templates/{{ ansible_fqdn }}"

    - name: remove temporary directory on destination instance
      become: true
      ansible.builtin.file:
        state: absent
        path: "{{ nginx_remote_tmp_directory }}/{{ ansible_fqdn }}"

- name: find templates archive on destination system
  ansible.builtin.stat:
    path: "{{ nginx_remote_tmp_directory }}/{{ ansible_fqdn }}/templates.tgz"
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: nginx_template_remote_archive

- name: extract {{ ansible_fqdn }}/templates.tgz
  ansible.builtin.unarchive:
    src: "{{ nginx_remote_tmp_directory }}/{{ ansible_fqdn }}/templates.tgz"
    dest: "{{ nginx_remote_tmp_directory }}/"
    remote_src: true
  when:
    - nginx_template_remote_archive.stat.exists or
      (nginx_templates_changed.changed or
      not nginx_template_remote_directory.stat.isdir or
      not nginx_template_remote_directory.stat.exists)

- name: create custom fact file
  bodsch.core.facts:
    name: nginx
    facts:
      templates: "{{ _nginx_templates }}"
      templates_checksums: "{{ nginx_templates_checksums }}"
      version: "{{ nginx_version }}"

- name: gathering facts now
  ansible.builtin.setup:

- name: ensure vhosts root path exists
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ nginx_user }}"
    mode: 0750
  loop:
    "{{ nginx_vhosts_root_directories }}"
  loop_control:
    label: "{{ item }}"
  when:
    - nginx_vhosts_root_directories | default([]) | count > 0

- name: ensure vhosts log path exists
  nginx_log_directories:
    vhosts: "{{ nginx_vhosts }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0750"
  when:
    - nginx_vhosts is defined

- name: checking existing domains certificates
  nginx_tls_certificates:
    vhosts: "{{ nginx_vhosts_https }}"
  when:
    - nginx_vhosts is defined
  register: check_domain_cert

- name: re-define nginx_vhosts_https with certificates state
  ansible.builtin.set_fact:
    nginx_vhosts_https: "{{ check_domain_cert.https_vhosts }}"

...
