---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yaml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yaml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yaml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yaml"
        - default.yaml
      skip: true

# - block:
#     - name: block installation of python2
#       copy:
#         src: apt/preferences.d/python2.pref
#         dest: /etc/apt/preferences.d/python2.pref
#         mode: 0644
#
#     - name: make sure python3-apt is installed (only debian based)
#       package:
#         name:
#           - python3-apt
#         state: present
#
#     - name: clean apt cache
#       command: apt-get clean
#       args:
#         warn: false
#   when:
#     - ansible_os_family | lower == 'debian'

- name: update package cache
  package:
    update_cache: true

- name: install requirements
  package:
    name: "{{ nginx_dependencies }}"
    state: present

# - name: create reload hook
#   template:
#     src: bin/hooks/reload_service.sh.j2
#     dest: /usr/local/bin/reload_service.sh
#     mode: 0755

- name: merge nginx configuration between defaults and custom
  set_fact:
    nginx_global: "{{ nginx_defaults_global       | combine( nginx_global   , recursive=True ) }}"
    nginx_http: "{{ nginx_defaults_http           | combine( nginx_http     , recursive=True ) }}"
    nginx_logformat: "{{ nginx_defaults_logformat | combine( nginx_logformat, recursive=True ) }}"

...
