---

nginx_gzip:
  enabled: true

nginx_custom_includes:
  prometheus.conf: |
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#satisfy
    satisfy any;
    # Die IP des HAProxy
    # damit ist es möglich das Jobs, die über den Jenkins aufgerufen werden und gegen
    # die admin URLs (https://admin.*.DOMAIN.TLD/admin/*) gehen
    # ohne Username/Passwort zu nutzen
    # Alle anderen Requests benötigen weiterhin die Authentifizierung via BA
    allow 192.168.0.0/24;
    deny  all;

    auth_basic           "Administrator’s Area";
    auth_basic_user_file "{{ htpasswd_credentials_path }}/.monitoring-passwdfile";


nginx_logformat:
  json_combined:
    format: |
      '{'
        '"time_local": "$time_local",'
        '"remote_addr": "$remote_addr",'
        '"remote_user": "$remote_user",'
        '"request": "$request",'
        '"status": "$status",'
        '"body_bytes_sent": "$body_bytes_sent",'
        '"request_time": "$request_time",'
        '"http_referrer": "$http_referer",'
        '"http_user_agent": "$http_user_agent"'
      '}';
    # escape: json


nginx_vhosts:
  # HTTP
  # ssl: false
  # LE: false
  default:
    # Set to True if you want to redirect http to https
    ssl:
      enabled: false

  nginx-status:
    filename: 00-status
    state: present  # default: present
    enabled: true   # default: true
    # domain(s)
    domains:
      - localhost
    # listen
    listen: 127.0.0.1:8088
    # locations
    locations:
      "/nginx_status":
        options: |
          stub_status on;
          access_log off;
          allow 127.0.0.1;
          deny all;


  # HTTP
  # enabled
  # present
  10-foo.molecule.lan:
    state: absent
    enabled: false

    domains:
      - foo.molecule.lan

    listen: 80

    root:  /var/www/foo.molecule.lan

    logfiles:
      access:
        file: /var/log/nginx/foo.molecule.lan/access.log
        loglevel: 'json_analytics'
      error:
        file: /var/log/nginx/foo.molecule.lan/error.log
        loglevel: notice

    # list of upstream servers
    upstreams:
      - name: paperless
        servers:
          - 127.0.0.1:8080   max_fails=3 fail_timeout=30s
        # strategy: 'ip_hash'
        keepalive: 32
      - name: unifi
        servers:
          - 127.0.0.1:8090   max_fails=3 fail_timeout=30s
        # strategy: 'ip_hash'
        keepalive: 32

    locations:
      "^~ /":
        options: |
          add_header X-Backend "bar";

          proxy_pass         http://paperless/;
          proxy_set_header   Host              $host;
          proxy_set_header   X-Real-IP         $remote_addr;
          proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Proto $scheme;

  # HTTP
  # enabled
  # present
  10-bar.molecule.lan:
    state: absent
    enabled: false

    domains:
      - bar.molecule.lan

    # Specify which port you want to listen to with clear HTTP, or leave undefined for 80
    listen:
      - "9000"
      - "[::]:9000 ipv6only=on"

    root:  /var/www/bar.molecule.lan

    logfiles:
      access:
        file: /var/log/nginx/bar.molecule.lan/access.log
        loglevel: 'json_analytics'
      error:
        file: /var/log/nginx/bar.molecule.lan/error.log
        loglevel: notice

  # HTTPS
  # enabled
  # absent
  # no letsencrypt
  # > 15-foo.molecule.lan.conf
  15-foo.molecule.lan:
    state: absent
    enabled: false

    filename: 15-foo.molecule.lan.conf

    domains:
      - foo.molecule.lan

    # Specify which port you want to listen to with clear HTTP, or leave undefined for 80
    listen: 9080

    # enable ssl
    ssl:
      enabled: true
      certificate: /etc/ssl/certs/ssl-cert-snakeoil.pem
      certificate_key: /etc/ssl/private/ssl-cert-snakeoil.key
      dhparam: /etc/letsencrypt/ssl-dhparams.pem

  # HTTPS
  # enabled
  # present
  20-bar.molecule.lan:
    state: absent
    enabled: true

    domains:
      - bar.molecule.lan
      - ruf.molecule.lan
      - slo.molecule.lan
      - zup.molecule.lan

    # creates also an HTTP vhost only for redirect to HTTPS
    redirect:
      from_port: 80

    # https://nginx.org/en/docs/http/ngx_http_core_module.html#listen
    listen:
      - 8443 reuseport
      - 443 ssl http2

    logfiles:
      access:
        # file: /var/log/nginx/bar.molecule.lan/access.log

        # https://nginx.org/en/docs/syslog.html
        syslog:
          # server=address
          server: 127.0.0.1:514
          # facility=string
          # severity=string
          # tag=string
          options:
            - facility=local0
            - tag=nginx
            - severity=debug
        loglevel: 'json_combined'
      error:
        # file: /var/log/nginx/bar.molecule.lan/error.log
        syslog:
          server: 127.0.0.1:514
        #  Debug – Debugging messages that are not useful most of the time.
        #  Info – Informational messages that might be good to know.
        #  Notice – Something normal but significant happened and it should be noted.
        #  Warn – Something unexpected happened, however it’s not a cause for concern.
        #  Error – Something failed.
        #  Crit – A critical condition occurred.
        #  Alert – Immediate action is required.
        #  Emerg – The system is unusable.
        loglevel: notice

    # Add Alt-Svc header to negotiate HTTP/3.
    # add_header alt-svc 'h3-23=":443"; ma=86400';

      # error_log syslog:server=192.168.1.1 debug;

      # access_log syslog:server=unix:/var/log/nginx.sock,nohostname;
      # access_log syslog:server=[2001:db8::1]:12345,facility=local7,tag=nginx,severity=info combined;

    # enable ssl
    ssl:
      enabled: true
      certificate: /etc/ssl/certs/ssl-cert-snakeoil.pem
      certificate_key: /etc/ssl/private/ssl-cert-snakeoil.key
      #certificate:     /etc/letsencrypt/live/bar.molecule.lan/fullchain.pem
      #certificate_key: /etc/letsencrypt/live/bar.molecule.lan/privkey.pem

  # HTTPS
  # enabled
  # present
  # > 20-foo.molecule.lan
  20-foo.molecule.lan:
    state: absent
    enabled: true

    filename: 20-foo.molecule.lan.conf

    domains:
      - foo2.molecule.lan

    # Specify which port you want to listen to with clear HTTP, or leave undefined for 80
    listen: 9080

    # enable ssl
    ssl:
      enabled: true
      certificate: /etc/ssl/certs/ssl-cert-snakeoil.pem
      certificate_key: /etc/ssl/private/ssl-cert-snakeoil.key

  # HTTPS
  # enabled
  # present
  # > 30-foofoo.molecule.lan
  30-foofoo.molecule.lan:
    state: absent
    enabled: false

    filename: 30-foofoo.molecule.lan.conf

    domains:
      - foo.molecule.lan

    listen: 443 http2

    # enable ssl
    ssl:
      enabled: true
      certificate:     /etc/letsencrypt/live/bar.molecule.lan/fullchain.pem
      certificate_key: /etc/letsencrypt/live/bar.molecule.lan/privkey.pem


nginx_vhosts_old:
  - server_name: "bar.molecule.lan"
    listen: 80
    state: present
    root:  /var/www/bar.molecule.lan
    access_log: /var/log/nginx/bar.molecule.lan/access.log
    error_log:  /var/log/nginx/bar.molecule.lan/error.log

    extra_parameters: |
      location ^~ / {
        add_header X-Backend "bar";

        proxy_pass         http://paperless/;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
      }
      # include modules.d/99-letsencrypt-acme-challenge.conf;

  - server_name: "foo.molecule.lan"
    listen: 80
    state: present
    root:  /var/www/foo.molecule.lan
    access_log: /var/log/nginx/foo.molecule.lan/access.log
    error_log:  /var/log/nginx/foo.molecule.lan/error.log

...
